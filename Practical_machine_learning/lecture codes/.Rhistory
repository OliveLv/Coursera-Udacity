library(kernlab)
data(spam)
spam$capitalAveSq<-spam$capitalAve^2
summary(spam)
library(ISLR)
library(caret)
library(lattice)
library(ggplot2)
data(Wage)
ls()
inTrain<-createDataPartition(y=Wage$wage,p=0.7,list=F)
training<-Wage[inTrain,]
testing<-Wage[-inTrain,]
# Load example data
library(ISLR)
library(lattice)
library(ggplot2)
library(caret)
data(Wage)
inTrain<-createDataPartition(y=Wage$wage,p=0.7,list=F)
training<-Wage[inTrain,]
testing<-Wage[-inTrain,]
table(training$jobclass)
dummies<-dummyVars(wage~jobclass,data=training)
head(dummies)
class(dummies)
head(predict(dummies,newdata=training))
# Common covariates to add,dummy variables
table(training$jobclass)
dummies<-dummyVars(wage~jobclass,data=training)
head(predict(dummies,newdata=training))
head(predict(dummies,newdata=testing))
nsv<-nearZeroVar(training,saveMetrics=T)
nsv
library(spines)
install.packages("splines",dependencies=T)
install.packages("splines",dependencies=T)
install.packages("splines",dependencies=T)
setRepositories()
utils:::menuInstallPkgs()
install.packages('splines',dependencies=T)
ap <- available.packages()
View(ap)
"splines" %in% rownames(ap)
library(installr)
updateR()
install.packages('splines',type="source")
install.packages("splines", repos = "http://r.findata.org")
install.packages("~/R/workspace/splines.tar.gz", repos = NULL, type = "source", lib="~/R/x86_64-pc-linux-gnu-library/3.0")
options(install.packages.check.source = FALSE)
install.packages("splines")
install.packages("splines",repos=null)
install.packages("splines",repos=NULL)
install.packages("installr"); library(installr) #load / install+load installr
updateR() 
b<-bs(training$age,df=3)
?bs
b<-bs(training$age)
library(splines)
b<-bs(training$age)
bsBasis<-bs(training$age,df=3)
bsBasis
lm1<-lm(wage~bsBasis,data=training)
plot(training$age,training$wage,pch=19,cex=0.5)
points(training$age,predict(lm1,newdata=training),pch=19,cex=0.5)
lm1<-lm(wage~bsBasis,data=training)
plot(training$age,training$wage,pch=19,cex=0.5)
points(training$age,predict(lm1,newdata=training),col="red",pch=19,cex=0.5)
bsBasis<-bs(training$age,degree=3)
bsBasis
lm1<-lm(wage~age,data=training)
bsBasisplot(training$age,training$wage,pch=19,cex=0.5)
points(training$age,predict(lm1,newdata=training),col="red",pch=19,cex=0.5)
plot(training$age,training$wage,pch=19,cex=0.5)
points(training$age,predict(lm1,newdata=training),col="red",pch=19,cex=0.5)
lm1<-lm(wage~bsBasis,data=training)
plot(training$age,training$wage,pch=19,cex=0.5)
points(training$age,predict(lm1,newdata=training),col="red",pch=19,cex=0.5)
lm2<-lm(wage~age,data=training)
points(training$age,predict(lm2,newdata=training),col="blue",pch=19,cex=0.5
)
predict(bsBasis,age=testing$age)
# Correlated predictors
library(caret)
library(kernlab)
data(spam)
inTrain<-createDataPartition(y=spam$type,p=0.75,list=F)
training<-spam[inTrain,]
testing<-spam[-inTrain,]
M<-abs(cor(training[,-58]))
diag(M)<-0
which(M>0.8)
# Correlated predictors
library(caret)
library(kernlab)
data(spam)
inTrain<-createDataPartition(y=spam$type,p=0.75,list=F)
training<-spam[inTrain,]
testing<-spam[-inTrain,]
M<-abs(cor(training[,-58]))
diag(M)<-0
which(M>0.8,arr.ind=T)
which(M>0.9,arr.ind=T)
M(40,32)
M[40,32]
M[34,32]
names(spam)[c(34,32)]
plot(spam[,34],spam[,32])
plot(spam[,40],spam[,32])
names(spam)[c(34,32)]
plot(spam[,34],spam[,32])
X<-0.71*spam$num415+0.71*spam$num857
Y<-0.71*spam$num415-0.71*spam$num857
plot(X,Y)
smallSpam<-spam[,c(34,32)]
prComp<-prcomp(smallSpam)
plot(prComp$x[,1],prComp$x[,2])
prComp$rotation
prComp
prComp$x
typeColor<-((spam$type=="spam")*1+1)
prComp<-prcomp(log10(spam[,-58]+1))
plot(prComp$x[,1],prComp$x[,2],col=typeColor,xlab="PC1",ylab="PC2")
prComp
length(prComp$x)
preProc<-preProcess(log10(spam[,-58]+1),method="pca",pcaComp=2)
spamPC<-predict(preProc,log10(spam[,-58]+1))
plot(spamPC[,1],spamPC[,2],col=typeColor)
length(spamPC)
spamPC
# PCA with caret
preProc<-preProcess(log10(spam[,-58]+1),method="pca",pcaComp=2)
spamPC<-predict(preProc,log10(spam[,-58]+1))
plot(spamPC[,1],spamPC[,2],col=typeColor)
preProc<-preProcess(log10(training[,-58]+1),method="pca",pcaComp=2)
trainPC<-predict(preProc,log10(training[,-58]+1))
modelFit<-train(training$type~.,method="glm",data=trainPC)
testPC<-predict(preProc,log10(testing[,-58]+1))
confusionMatrix(testing$type,testPC)
confusionMatrix(testing$type,predict(modelFit,testPC))
preProc<-preProcess(log10(training[,-58]+1),method="pca",pcaComp=2)
trainPC<-predict(preProc,log10(training[,-58]+1))
modelFit<-train(training$type~.,method="glm",data=trainPC)
testPC<-predict(preProc,log10(testing[,-58]+1))
confusionMatrix(testing$type,predict(modelFit,testPC))
modelFit<-train(training$type~.,method="glm",preProcess="pca",data=training)
confusionMatrix(testing$type,predict(modelFit,testing)) 
q()
q()
